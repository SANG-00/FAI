(******************************************************************************
* RPA, TP # 3.2.
*
* Ejercicio # 5 <Triangulos>.
*
* Notación UpperCammelCase, Indentación 2, Pseudocódigo.
*
* Santino Fuentes, 2022.
******************************************************************************)
(*
* El algoritmo utiliza un módulo que determina si las medidas ingresadas
* corresponden o no a un triángulo, de ser un triángulo, utiliza un módulo 
* que clasifica el triángulo según las medidas de sus lados. Finalmente,
* se muestran por pantalla los resultados obtenidos por la clasificación.
*)

// Programa principal

ALGORITMO Triangulos (REAL Lado0 Lado1 Lado2, TEXTO TipoTriangulo) RETORNO Ø
	ESCRIBIR("Ingrese el lado 0: ")
	LEER(Lado0)
	ESCRIBIR("Ingrese el lado 1: ")
	LEER(Lado1)
	ESCRIBIR("Ingrese el lado 2: ")
	LEER(Lado2)
	BOOLEANO EsTriangulo <-- Verificador(Lado0, Lado1, Lado2)
	SI(EsTriangulo = TRUE)ENTONCES
		TipoTriangulo <-- Clasificador(Lado0, Lado1, Lado2)
		ESCRIBIR("El triángulo es de tipo: ", TipoTriangulo, ".")
	SINO
		ESCRIBIR("Las medidas ingresadas no corresponden a un triángulo.")
FIN ALGORITMO Triangulos

// Módulo

MODULO Clasificador (REAL L0, L1, L2) RETORNO TEXTO
	TEXTO Tipo
	SI(L0 = L1 = L2)ENTONCES
		Tipo <-- ("Equilátero")
	OTRO SI(L0 = L1 || L0 = L2 || L1 = L2)ENTONCES
		Tipo <-- ("Isósceles")
	OTRO SI(!(L0 = L1 = L2))ENTONCES
		Tipo <-- ("Escaleno")
	FIN SI
	RETORNO Tipo
FIN MODULO

// Módulo

MODULO Verificador (REAL L0, L1, L2) RETORNO BOOLEANO
	BOOLEANO Triangulo
	SI(L0 + L1 > L2 || L0 + L2 > L1 || L2 + L1 > L0)ENTONCES
	Triangulo <-- TRUE
	SINO
	Triangulo <-- FALSE
	FIN SI
	RETORNO Triangulo
FIN MODULO Verificador
